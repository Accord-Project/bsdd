---
title: "SemanticBSDD"
subtitle: "Improving the GraphQL, JSON and RDF Representations of buildingSmart Data Dictionary"
author: "Vladimir Alexiev, Mihail Radkov, Nataliya Keberle"
format:
  revealjs: 
    incremental: false
    footer: "11th Linked Data in Architecture and Construction Workshop, 15--16 June 2023, Matera, Italy"
    slide-number: c/t
    theme: simple
    logo: ../img/ontotext.png
    embed-resources: true
    #parallax-background-image: ../img/background-bridge.png
    #parallax-background-size: "2100px 900px"
    #parallax-background-horizontal: 200
    #parallax-background-vertical: 50
title-slide-attributes:
  data-background-image: ../img/background-bridge.avif
  data-background-size: cover
  data-background-opacity: "0.2"
---
## Objective

- highlight the defects in the original GraphQL implementation of bSDD
- overview the refactored solution proposed by Ontotext
- overview the proposed improvements

## bSDD GraphQL Schema: Voyager 
::: {.panel-tabset}

### Original

[![](../img/bsdd-graphql-voyager-overview.png)](https://rawgit2.com/Accord-Project/bsdd/main/bsdd-graphql-voyager-orig.html){preview-link="true"}

### Refactored 

[![](../img/bsdd-graphql-voyager-refact-overview.png)](https://rawgit2.com/Accord-Project/bsdd/main/bsdd-graphql-voyager-refact.html){preview-link="true"}

:::

## bSDD GraphQL Schema: PlantUML 

PlantUML is used with [soml2puml](https://github.com/VladimirAlexiev/soml/tree/master/soml2puml) convertor tool

![](../img/bsdd-graphql-soml-diagram-overview.png)

## Original GraphQL: Findings (1/3) {.smaller}

- reference entities `ReferenceDocument`, `Country`, `Unit`, `Language`
  are disconnected from the rest of the schema
- relation entities have only an incoming link but no outgoing link
- many entities cannot be queried directly from the `Root` 
- no backward arrows to get from a lower-level entity back to its "parent" entity
- a number of parallel arrows. GraphQL schema can use parameters to distinguish between the different uses


## Original GraphQL: Findings (2/3) {.smaller}

At the high level of detail:

- `Property` and `ClassificationProperty` are very similar, but there's no inheritance/relation between them
- `PropertyValue` and `ClassificationPropertyValue` are exactly the same, so can be reduced to one entity

## Original GraphQL: Fragment {.scrollable}

![](../img/bsdd-graphql-voyager-Classification-ClassificationProperty.png)

## Original GraphQL: Findings (3/3) {.smaller}

Even more details:

- mixture of singular/plural in property names

  `property/properties`, 
  `relations`, 
  `synonyms`, 
  `countriesOfUse`, 
  `relatedIfcPropertyNames`, 
  etc.

## Refactored GraphQL: Improvements {.smaller}

- all entities are queryable directly from the `Root`
- link deduplication
- each link is named the same as target entity
- navigation between entities is bidirectional, e.g., `Classification` hierarchy can be navigated both up and down (`parentClassification`, `childClassification`)
- a query can traverse a `Relation` entity to get data about the related entity:
  - `Classification.relation` -> `ClassificationRelation.related` -> `Classification`
  - `Property.relation` -> `PropertyRelation.related` -> `Property`
- a single entity `PropertyValue` is used by both `Property` and `ClassificationProperty`
- property names are in singular

## Refactored GraphQL: Fragment {.scrollable}

![](../img/bsdd-graphql-voyager-refact-Classification-ClassificationProperty.png)

## Graph _i_ QL
::: {.panel-tabset}

### Original

[![](../img/graphiql-orig.png)](https://test.bsdd.buildingsmart.org/graphiql)

### Refactored 

[![](../img/graphiql-refact.png)](https://bsdd.ontotext.com/graphiql/)

:::

# Suggested Improvements

## Presentation (1/3)

- uniform identification for the search
- equal data retrieved from different API
- improve URL structure and consistency

## Uniform Identification for the Search(1/3) {.smaller}

:::: {.columns}

::: {.column width="50%"}
![](../img/bSI-search-page.png)
:::

::: {.column width="50%"}
![](../img/IFC-class-cableSegment-search.png)
:::

::::

::: {.fragment .fade-in-then-semi-out}
February 2023: **IfcCableSegment** has id: 
[https://search.bsdd.buildingsmart.org/Classification/Index/58453](https://search.bsdd.buildingsmart.org/Classification/Index/58453)
:::

::: {.fragment .fade-in} 
May 2023: **IfcCableSegment** has another id: [https://search.bsdd.buildingsmart.org/Classification/Index/70992](https://search.bsdd.buildingsmart.org/Classification/Index/70992)
:::

## Uniform Identification for the Search(2/3) {.smaller}

IfcCableSegment has also unique URI: 

[https://identifier.buildingsmart.org/uri/buildingsmart/ifc-4.3/class/IfcCableSegmentCABLESEGMENT](https://identifier.buildingsmart.org/uri/buildingsmart/ifc-4.3/class/IfcCableSegmentCABLESEGMENT)

:::: {.columns}
::: {.column width="20%"}
CableSegment entity as displayed at the bSDD web site
:::
::: {.column width="80%"}
[![](../img/IFC-class-cableSegment-web.png)](https://identifier.buildingsmart.org/uri/buildingsmart/ifc-4.3/class/IfcCableSegmentCABLESEGMENT)
:::
::::

## Uniform Identification for the Search(3/3) {.smaller}

Non-unique identification violates FAIR Findability principle 

```F1: (Meta)data are assigned a globally unique and persistent identifier```

## Equal Data Retrieved from Different API (1/2) {.smaller}

We have compared three representations returned by the bSDD server:

- JSON from the GraphQL API 
  - ```https://test.bsdd.buildingsmart.org/graphiql/```, 
- JSON from the REST (entity) API
  - ```curl https://identifier.buildingsmart.org/uri/buildingsmart/```
    ```<domain>/class|prop/<name>```
and 
- RDF from the REST (entity) API
  - ```curl -Haccept:text/turtle \\```
    ```      https://identifier.buildingsmart.org/uri/buildingsmart/```
    ```<domain>/class|prop/<name> ```

## Equal Data Retrieved from Different API (2/2) {.smaller}

We selected entities of each class that have the **maximum number of filled fields**, and compared the results returned by each API. 

The differences are here:  
[![](../img/bsdd-data-analysis-sheet-cropped.png)](https://docs.google.com/spreadsheets/d/1z_NRMlExlVuqWhBbSErQ9iiDBY4O_fKMd3avV3-NCmo/edit)

## Improve URL Structure and Consistency (1/7){.smaller}

Recommendations on ontology URI design, including versioning and opaque URIs to maintain evolution and multilingualism inherent to bSDD, are described in [Garijo & Poveda-Villalon, 2020](http://ebooks.iospress.nl/doi/10.3233/SSW200034).

Almost all bSDD domain URLs now have the same structure:
```https://identifier.buildingsmart.org/uri/<org>/<domain>-<version>```

URIs can be more ``hackable'', allowing users to navigate the
hierarchy by pruning the URI:
```https://identifier.buildingsmart.org/uri/<org>/<domain>/<version>```

::: aside
[L. Dodds and I. Davis, ``Linked data patterns: A pattern catalogue for modelling, publishing, and consuming linked data. Linked data patterns,'' Sep. 06, 2022.](https://patterns.dataincubator.org/book/hierarchical-uris.html)
:::

## Improve URL Structure and Consistency (2/7){.smaller}

- In some cases, the ```<org>``` is repeated in the ```<domain>``` part
- In some cases, the ```<org>``` name doesn't quite mesh with the domain name, perhaps due to the way bSDD allocates ```<org>``` identifiers to bSDD contributors
  - ```bim-de/DINSPEC91400```: the publisher of this spec is DIN (the German standards organization), not the ```bim-de``` initiative
  - ```digibase/volkerwesselsbv```: [bimregister.nl news from 2018](https://www.bimregister.nl/actueel/video/author/89-delanokenepa?start=250) suggest that ```digibase``` is a new company/initaitive within Volker Wessel
  - ```digibase/nen2699```: the publisher of this spec is NEN (the Netherlands standards organization), not the ```digibase``` company/initiative
  - ```digibase/digibasebouwlagen```: perhaps the org name ```digibase``` should not be repeated as the prefix of the domain ```bouwlagen``` (building layers)

## Improve URL Structure and Consistency (3/7){.smaller}

- Explicate domain versions:

```https://identifier.buildingsmart.org/uri/acca/ACCAtest-0.1``` 

can become

```https://identifier.buildingsmart.org/uri/acca/ACCAtest/0.1```

A new entity ```DomainVersion``` can provide linking all versions of a domain to its master ```Domain``` entity.

## Improve URL Structure and Consistency (4/7) {.smaller}

- Declare URLs to be ```ID``` and use a mandatory field ```id```{.smaller}
  - Most GraphQL implementations call this field simply ```id```, whereas bSDD uses ```namespaceUri```
  - Many nodes do not have their own ```namespaceUri``` field, or it is not fully populated

## Improve URL Structure and Consistency (5/7) {.smaller}

- Remove the overlap of Entity Classes with classificationTypes

The key field ```classificationType``` specifies the kind of classification.

|       c | classificationType     | overlaps with entity|
|---------+------------------------+---------------------|
|  **29** | "DOMAIN"               | ```Domain```            |
|  **18** | "REFERENCE_DOCUMENT"   | ```ReferenceDocument``` |

Examples of unusual _classifications_:

```https://identifier.buildingsmart.org/uri/ATALANE/REX-OBJ-1.0/class/589b06ad-f802-468b-939c-e60436601a7a```
  is a "REFERENCE_DOCUMENT" with name "d√©cret 2011-321 (23/03/2011)".
  
  Why is it not a ```ReferenceDocument``` entity?

## Improve URL Stucture and Consistency (6/7) {.smaller}

- All entities should have URL

All significant classes should have ```ID```, which in the case of RDF data is the node URL.

However, many bSDD classes don't have such a field:

- ```Domain, Property, Classification``` do have ```namespaceUri```
- ```Country, Language, Unit``` don't have an ID but have a field (```code, isocode```)
  that can be used to make an ```ID```, when prepended with an appropriate prefix.

## Improve URL Stucture and Consistency (7/7) {.smaller}

```Property``` and ```ClassificationProperty``` are two different classes, but the latter does not have a distinct URL in GraphQL and JSON.

The same URL is overloaded to identify entities of both classes.

```ClassificationProperty``` are thus "second class" entities and are not returned separately by the JSON or RDF entity API, but only as part of the respective ```Classification```


```
curl https://identifier.buildingsmart.org/uri/buildingsmart/ifc-4.3/class/IfcCableSegmentCABLESEGMENT/ACResistance

{"":["Classification with namespace URI
 'https://identifier.buildingsmart.org/uri/buildingsmart/ifc-4.3/class/IfcCableSegmentCABLESEGMENT/ACResistance'
  not found"]}
```
::: aside
```ACResistance``` is a ClassificationProperty of ```IfcCableSegment.CABLESEGMENT``` classification.
:::

## Modelling issues

## Modelling issues
- Unify different solutions in the modelling of Complex Properties

## Modelling issues
- Improve modelling of Dynamic Properties

## Modelling issues
- Improve relations between entities

## Modelling issues
- Add more entities

## Modelling issues
- Use class inheritance

## Modelling issues
- Improve representation of ```PropertyValues```

## Modelling issues
- Improve representation of ```predefinedValue```

## Modelling issues
- Improve multilingual support

## Data quality

## Refactoring

## Conclusions and Future Work {.smaller}

Here are further ideas for improvement:

- improvement of [bSDD ontology](https://github.com/buildingSMART/bSDD/blob/master/RDF/preview-bsdd-rdfs-0.4.ttl)
- implement more radical data model refactoring to convert "strings" (countries, reference documents, etc.) into "things"
- link bSDD units of measure to [QUDT ontology](http://qudt.org/2.1/schema/qudt)
- perform deeper data quality analysis using SHACL shapes generation and validation provided by [Ontotext Platform Semantic Objects](https://platform.ontotext.com/semantic-objects/)
- address and resolve more data quality issues, including 
  - seeking correlation between dimension vectors, units of measure and physical quantity, 
  - parsing out enumeration values from `Property/ClassificationProperty` descriptions and creation of corresponding `PropertyValue` lists
- make more graph visualizations
- obtain more interesting statistics using SPARQL

## Acknowledgements {.smaller}

![](../img/accord.png){width=200px} ![](../img/bsdd.png){width=200px} ![](../img/graphdb.png){width=200px} ![](../img/ontotext-platform.png){width=200px}

Funding: [ACCORD project](https://accordproject.eu/), Horizon Europe, grant #101056973

Data: [buildingSMART Data Dictionary](https://www.buildingsmart.org/users/services/buildingsmart-data-dictionary/) 
  (bSI credits: Leon van Berlo, Artur Tomczak, Erik Baars)

Powered by:

- [Ontotext GraphDB](https://graphdb.ontotext.com/)
- [Ontotext Platform Semantic Objects](https://platform.ontotext.com/semantic-objects/)





